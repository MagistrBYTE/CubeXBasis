//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль общей функциональности
// Подраздел: Подсистема настроек сцены и проекта
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXSettingsStorage.cs
*		Базовый класс-хранилища для хранения пользовательских настроек в формате имя-значение.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;
//---------------------------------------------------------------------------------------------------------------------
using CubeX.Core;
//=====================================================================================================================
namespace CubeX
{
	namespace Common
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup UnityCommonSettings Подсистема настроек сцены и проекта
		//! Подсистема настроек сцены и проекта определяет базовое хранилище для хранения пользовательских настроек, 
		//! а также хранилища дополнительных параметров на уровне сцены и хранилища дополнительных параметров на уровне проекта.
		//!
		//! При работе с несколькими сценами, зачастую возникает необходимость хранить дополнительные параметры сцены, например 
		//! ее положение камеры, настройки ввода, настройки освещения, параметры отображения и так далее. 
		//! Стандартная сцена эти данные не хранит - они сохраняются на уровне проекта поэтому при переключении сцены возникает
		//! необходимость повторной установки параметров. 
		//! Хранилище настроек сцены \ref CubeX.Common.CubeXSceneSettingsStorage обеспечивает хранение дополнительных параметров 
		//! и пользовательских настроек сцены с возможность их применить к определенной сцене.
		//!
		//! Но уровне проекта также предусмотрено хранения пользовательских настроек, относящимся в целом к проекту, а также 
		//! параметров относящимся в целом к проекту \ref CubeX.Common.CubeXProjectSettingsStorage. Это параметры условной 
		//! компиляции (с возможность добавление/удаления, активации/деактивации пользовательских директив), иконка проекта и 
		//! параметры публикации, список идентификаторов подгружаемых ресурсов.
		//! \ingroup UnityCommon
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс-хранилище пользовательских настроек в формате имя-значение
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[CreateAssetMenu(fileName = "Settings", menuName = "CubeX/Create Settings", order = 1)]
		public class CubeXSettingsStorage : ScriptableObject, ICubeXResourceable
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			[SerializeField]
			internal CSettingObject mUserSettings;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ОСНОВНЫЕ ПАРАМЕТРЫ
			//
			/// <summary>
			/// Пользовательские настройки
			/// </summary>
			public CSettingObject UserSettings
			{
				get { return (mUserSettings); }
			}
			#endregion

			#region ======================================= СОБЫТИЯ UNITY =============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Включение хранилища
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnEnable()
			{
				
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отключение хранилища
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnDisable()
			{
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXResourceable =================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Первичное создание хранилища
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Create()
			{
				if (mUserSettings == null) mUserSettings = new CSettingObject();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Первичная безопасная инициализация несериализуемых данных
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Init()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Принудительный сброс записанных данных на диск
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Flush()
			{
#if UNITY_EDITOR
				UnityEditor.EditorUtility.SetDirty(this);
#endif
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существование настройки с указанным именем
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <returns>Статус наличия настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean ExistsSetting(String setting_name)
			{
				for (Int32 s = 0; s < mUserSettings.Count; s++)
				{
					CSettings settings = mUserSettings[s];

					for (Int32 i = 0; i < settings.Count; i++)
					{
						if (settings[i].Name == setting_name)
						{
							return true;
						}
					}
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существование настройки с указанным идентификатором настройки
			/// </summary>
			/// <param name="id">Идентификатор настройки</param>
			/// <returns>Статус наличия настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean ExistsSetting(Int32 id)
			{
				for (Int32 s = 0; s < mUserSettings.Count; s++)
				{
					CSettings settings = mUserSettings[s];

					for (Int32 i = 0; i < settings.Count; i++)
					{
						if (settings[i].ID == id)
						{
							return true;
						}
					}
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существование настройки с указанным именем и идентификатором настройки
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <returns>Статус наличия настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean ExistsSetting(String setting_name, Int32 id)
			{
				for (Int32 s = 0; s < mUserSettings.Count; s++)
				{
					CSettings settings = mUserSettings[s];

					for (Int32 i = 0; i < settings.Count; i++)
					{
						if (settings[i].ID == id && settings[i].Name == setting_name)
						{
							return true;
						}
					}
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Индекс настройки с указанным именем
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <returns>Индекс настройки с указанными именем или -1 если настройка с таким именем не найдена</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 IndexOfSetting(String setting_name)
			{
				for (Int32 s = 0; s < mUserSettings.Count; s++)
				{
					CSettings settings = mUserSettings[s];

					for (Int32 i = 0; i < settings.Count; i++)
					{
						if (settings[i].Name == setting_name)
						{
							return i;
						}
					}
				}

				return -1;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавления настройки с указанным именем и значением
			/// </summary>
			/// <remarks>
			/// Если настройка с указанным именем существуют до данные не добавятся!!!
			/// </remarks>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности добавления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean AddSetting(String setting_name, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				settings.Add(setting_name, value);

				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавления настройки с указанным именем и типом значением
			/// </summary>
			/// <remarks>
			/// Если настройка с указанным именем существуют до данные не добавятся!!!
			/// </remarks>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="value_type">Тип значения настройки</param>
			/// <returns>Статус успешности добавления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean AddFromValueTypeSetting(String setting_name, TValueType value_type)
			{
				CSettings settings = mUserSettings.Default;
				settings.AddFromValueType(setting_name, value_type);

				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавления настройки с указанным именем, идентификатором настройки и значением
			/// </summary>
			/// <remarks>
			/// Если настройка с указанным именем и идентификатором настройки существуют до данные не добавятся!!!
			/// </remarks>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности добавления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean AddSetting(String setting_name, Int32 id, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				settings.Add(setting_name, id, value);

				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка параметров настройки по указанному имени
			/// </summary>
			/// <remarks>
			/// Если настройка с указанным именем не существуют до параметры не установятся
			/// </remarks>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности установки параметров настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean SetSetting(String setting_name, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].Name == setting_name)
					{
						settings[i].Set(value);
						return true;
					}
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка параметров настройки по указанному имени и идентификатором настройки
			/// </summary>
			/// <remarks>
			/// Если настройка с указанным именем не существуют до параметры не установятся
			/// </remarks>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности установки параметров настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean SetSetting(String setting_name, Int32 id, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].ID == id && settings[i].Name == setting_name)
					{
						settings[i].Set(value);
						return true;
					}
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавления/обновление настройки с указанным именем
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности добавление или обновления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean UpdateSetting(String setting_name, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				settings.Update(setting_name, value);
				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавления/обновление настройки с указанным именем и идентификатором настройки
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <param name="value">Значение настройки</param>
			/// <returns>Статус успешности добавление или обновления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean UpdateSetting(String setting_name, Int32 id, System.Object value)
			{
				CSettings settings = mUserSettings.Default;
				settings.Update(setting_name, id, value);
				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение настройки по указанному имени
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <returns>Найденная настройка или null</returns>
			//---------------------------------------------------------------------------------------------------------
			public CSettingItem GetSetting(String setting_name)
			{
				CSettings settings = mUserSettings.Default;
				return(settings.Get(setting_name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение настройки по указанному имени и идентификатору настройки
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <returns>Найденная настройка или null</returns>
			//---------------------------------------------------------------------------------------------------------
			public CSettingItem GetSetting(String setting_name, Int32 id)
			{
				CSettings settings = mUserSettings.Default;
				return (settings.Get(setting_name, id));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение значения настройки по указанному имени
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <returns>Найденное значение или значение по умолчанию</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object GetValueSetting(String setting_name)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].Name == setting_name)
					{
						return (settings[i].Get());
					}
				}

				return null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение значения настройки по указанному имени
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="default_value">Значение по умолчанию</param>
			/// <returns>Найденное значение или значение по умолчанию</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object GetValueSetting(String setting_name, System.Object default_value)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].Name == setting_name)
					{
						return (settings[i].Get());
					}
				}

				return default_value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение значения настройки по указанному имени и идентификатору настройки
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <param name="id">Идентификатор настройки</param>
			/// <returns>Найденное значение или значение по умолчанию</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object GetValueFromIDSetting(String setting_name, Int32 id)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].ID == id && settings[i].Name == setting_name)
					{
						return (settings[i].Get());
					}
				}

				return (null);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаления настройки с указанным именем
			/// </summary>
			/// <param name="setting_name">Имя настройки</param>
			/// <returns>Статус успешности удаления настройки</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean RemoveSetting(String setting_name)
			{
				CSettings settings = mUserSettings.Default;
				for (Int32 i = 0; i < settings.Count; i++)
				{
					if (settings[i].Name == setting_name)
					{
						settings.RemoveAt(i);
						return true;
					}
				}

				return false;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================