//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль общей функциональности
// Подраздел: Подсистема сериализации Unity
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXSerializationCommon.cs
*		Определение общих типов, структур данных и интерфейсов подсистемы сериализации данных для Unity.
*		Подсистема сериализации данных для Unity является логическим расширением подсистемы сериализации и обеспечивает
*	альтернативное сохранение/загрузку сцены или игрового объекта/объектов с учетом определённого объема данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.IO;
using System.Xml;
using System.Reflection;
using UnityEngine;
//---------------------------------------------------------------------------------------------------------------------
using CubeX.Core;
//=====================================================================================================================
namespace CubeX
{
	namespace Common
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup UnityCommonSerialization Подсистема сериализации
		//! Подсистема сериализации данных для Unity является логическим расширением подсистемы сериализации и обеспечивает 
		//! альтернативное сохранение/загрузку сцены или игрового объекта/объектов с учетом определённого объема данных.
		//!
		//! ## Возможности/особенности
		//! 1. Гибкое определение объема сериализуемых данных пользовательского компонента
		//! 2. Гибкое определение объема сериализуемых данных для игрового объекта
		//! 3. Возможность сохранения/загрузки сцены или игрового объекта/объектов в режиме разработки
		//! 4. Сохранение определённого объема данных в режиме игры
		//!
		//! ## Описание
		//! Подсистема сериализации для Unity является логическим расширением подсистемы сериализации и обеспечивает 
		//! альтернативное сохранение/загрузку сцены или игрового объекта/объектов или сохранение/загрузку определённого объема 
		//! данных как в режиме разработке так и режиме игры.
		//!
		//! При обычном сохранение подсистема сохраняет полный набор данных и компонентов игрового объекта или игровых объектов. 
		//! Для пользовательских компонентов здесь присутствуют все возможности подсистемы сериализации \ref CoreModuleSerialization
		//!
		//! Другая модель сохранения подразумевает сохранение только тех игровых объектов на которых присутствует 
		//! компонент \ref CubeX.Common.CubeXSerializationComponent. Данный компонент позволяет гибко определить объем и тип 
		//! сохраняемых данных для каждого игрового объекта. Это позволяет сохранять/загружать только нужные данные, 
		//! а также соответственно обновлять данные.
		//!
		//! ## Использование
		//! 1. Указать атрибут \ref CubeX.Core.CubeXSerializeMemberAttribute для полей и свойств которые подлежат сериализации
		//! 2. Либо можно указать атрибут XmlAttribute
		//! 3. Можно реализовать интерфейс \ref CubeX.Core.ICubeXSerializeImplementationXML или \ref CubeX.Core.ICubeXSerializeImplementationBinary
		//! для самостоятельной записи/чтения данных объектом в соответствующий формат.
		//! 4. Можно реализовать интерфейс \ref CubeX.Core.ICubeXSerializableObject, добавить объект в словарь \ref CubeX.Core.XSerializationDispatcher.SerializableObjects 
		//! по ключу IDKeySerial, и тогда при последующей загрузки произойдет обновление данного объекта.
		//! 5. Можно самостоятельно определить объем необходимых данных для сериализации \ref CubeX.Core.CubeXSerializeDataAttribute
		//! 6. Можно использовать компонент \ref CubeX.Common.CubeXSerializationComponent для тех игровых объектов которые надо
		//! сохранить/загружать, с помощью свойства \ref CubeX.Common.CubeXSerializationComponent.SerializationVolume можно 
		//! определить какие конкретно компоненты надо сохранить для каждого игрового объекта.
		//! 7. Для сохранения/загрузки использовать соответствующие методы \ref CubeX.Common.XSerializationDispatcherUnity
		//! 8. Диспетчер подсистемы сериализации можно использовать в ручную(непосредственно вызывать его методы в нужных местах) 
		//! или посредством \ref CubeX.Common.CubeXSystemDispatcher.
		//! \ingroup UnityCommon
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Место хранения данных
		/// </summary>
		/// <remarks>
		/// Место хранения данных определят физическое место куда будут сохранены данные
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TSerializationStorage
		{
			/// <summary>
			/// Внешний файл
			/// </summary>
			/// <remarks>
			/// В режиме разработке это файл может находится в любом месте директории Assets.
			/// В режиме игры файл сохраняется в директории Application.persistentDataPath
			/// </remarks>
			File,

			/// <summary>
			/// В хранилище PlayerPrefs
			/// </summary>
			/// <remarks>
			/// Максимальный размер данных для сохранения составляет 1 MB
			/// </remarks>
			PlayerPrefs,

			/// <summary>
			/// Серверное(облачное) хранение данных
			/// </summary>
			/// <remarks>
			/// Запланировано на будущие реализации
			/// </remarks>
			Server
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Объем и тип сериализуемых стандартных компонентов игрового объекта
		/// </summary>
		/// <remarks>
		/// Набор флагов позволяет гибко определить какие данные нужно сохранить в каждом конкретном случае и для конкретного игрового объекта.
		/// Распределение компонентов по группам смотреть здесь <see cref="CubeXSerializationService"/>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Flags]
		public enum TSerializationVolume
		{
			/// <summary>
			/// Компонент трансформации
			/// </summary>
			Transform = 1,

			/// <summary>
			/// Компоненты ренденинга
			/// </summary>
			Renderer = 2,

			/// <summary>
			/// Компоненты световых источников
			/// </summary>
			Light = 4,

			/// <summary>
			/// Компоненты отображающие модель
			/// </summary>
			Model = 8,

			/// <summary>
			/// Другие компоненты для трехмерной графики - камера
			/// </summary>
			Over3D = 16,

			/// <summary>
			/// Компоненты трехмерного физического моделирования
			/// </summary>
			Physics3D = 32,

			/// <summary>
			/// Компоненты трехмерных коллайдеров
			/// </summary>
			Collider3D = 64,

			/// <summary>
			/// Компоненты трехмерных физических сочленений
			/// </summary>
			Joint3D = 128,

			/// <summary>
			/// Компоненты двухмерного физического моделирования
			/// </summary>
			Physics2D = 256,

			/// <summary>
			/// Компоненты двухмерных коллайдеров
			/// </summary>
			Collider2D = 512,

			/// <summary>
			/// Компоненты двухмерных физических сочленений
			/// </summary>
			Joint2D = 1024,

			/// <summary>
			/// Компоненты для работы с аудио подсистемой
			/// </summary>
			Audio = 2048,

			/// <summary>
			/// Компоненты для работы с двухмерной графикой и пользовательским интерфейсом
			/// </summary>
			UI = 4096,

			/// <summary>
			/// Пользовательские компоненты с атрибутом сериализации
			/// </summary>
			UserAttribute = 8192
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Политика сериализации данных в режиме редактора
		/// </summary>
		/// <remarks>
		/// В режиме игры сохраняются поля и свойства пользовательских скриптов только с атрибутом <see cref="CubeXSerializeMemberAttribute"/>
		/// Для режима редактора мы можем изменить данную политику и либо сохранить как в игре, либо использовать правила Unity, т.е. 
		/// сохраняться будут все публичные данные и данные имеющие атрибут <see cref="SerializeField"/>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TSerializationEditorPolicy
		{
			/// <summary>
			/// Политика сериализации данных как в игре
			/// </summary>
			SerializationAttribute,

			/// <summary>
			/// Политика сериализации данных как в Unity
			/// </summary>
			UnitySerializeField
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Объем сериализации сериализации данных в режиме редактора
		/// </summary>
		/// <remarks>
		/// В режиме игры сериализуются только игровые объекты имеющие компонент <see cref="CubeXSerializationComponent"/> в соответствии с его свойствами.
		/// В режиме редакторы мы можем придерживаться данной политики, либо сохранить все сцену, либо сохранить только выделенные объекты
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TSerializationEditorVolume
		{
			/// <summary>
			/// Сохраняются все объекты сцены
			/// </summary>
			Scene,

			/// <summary>
			/// Сохраняются выделенные объекты на сцене 
			/// </summary>
			Selected,

			/// <summary>
			/// Сохраняются только игровые объект имеющие компонент <see cref="CubeXSerializationComponent"/> в соответствии с его свойствами
			/// </summary>
			Game
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================