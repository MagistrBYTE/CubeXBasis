//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема единиц измерения
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXUnitMeasurementCommon.cs
*		Общие типы и структуры данных единиц измерения.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreModuleUnitMeasurement Подсистема единиц измерения
		//! Подсистема единиц измерения обеспечивает начальную инфраструктуру для представления базовых типов измерения 
		//! и соответствующую им систему единиц измерения.
		//! Основной задачей подсистемы является представления величины и связанной с ней соответствующей  единицы измерения 
		//! с возможностью выполнения основных действий(арифметических, логических, преобразования) которые имеют логический 
		//! смысл в контексте соответствующего типа и единицы измерения.
		//! \ingroup CoreModule
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения величины поддерживающую определённую единицу измерения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXUnitValue
		{
			/// <summary>
			/// Значение величины
			/// </summary>
			Double Value { get; set; }

			/// <summary>
			/// Единица измерения
			/// </summary>
			Enum UnitType { get; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения величины поддерживающую определённую единицу измерения
		/// </summary>
		/// <typeparam name="TUnit">Тип единицы измерения</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXUnitValue<TUnit> : ICubeXUnitValue where TUnit : Enum
		{
			/// <summary>
			/// Единица измерения
			/// </summary>
			new TUnit UnitType { get; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс определяющий величину и соответствующую определённую единицу измерения
		/// </summary>
		/// <typeparam name="TUnit">Тип единицы измерения</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[CubeXSerializeAsPrimitive]
		public struct TUnitValue<TUnit> : ICubeXUnitValue<TUnit>, IEquatable<TUnitValue<TUnit>>, 
			IComparable<TUnitValue<TUnit>>, ICloneable where TUnit : Enum
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация объекта из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static TUnitValue<TUnit> DeserializeFromString(String data)
			{
				TUnitValue<TUnit> value = new TUnitValue<TUnit>(XNumbers.ParseDouble(data));
				return value;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
#endif
			internal Double mValue;
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
#endif
			internal TUnit mUnitType;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение
			/// </summary>
			public Double Value
			{
				get { return (mValue); }
				set
				{
					mValue = value;
				}
			}

			/// <summary>
			/// Единица измерения
			/// </summary>
			public TUnit UnitType
			{
				get { return mUnitType; }
			}

			/// <summary>
			/// Единица измерения
			/// </summary>
			Enum ICubeXUnitValue.UnitType
			{
				get
				{
					return (mUnitType);
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public TUnitValue(Double value)
			{
				mValue = value;
				mUnitType = (TUnit)(System.Object)1;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			/// <param name="unit_type">Единица измерения</param>
			//---------------------------------------------------------------------------------------------------------
			public TUnitValue(Double value, TUnit unit_type)
			{
				mValue = value;
				mUnitType = unit_type;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Equals(System.Object obj)
			{
				if (obj != null)
				{
					if (typeof(TUnitValue<TUnit>) == obj.GetType())
					{
						TUnitValue<TUnit> value = (TUnitValue<TUnit>)obj;
						return Equals(value);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства объектов по значению
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Equals(TUnitValue<TUnit> other)
			{
				return mValue == other.mValue;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(TUnitValue<TUnit> other)
			{
				return mValue.CompareTo(other.mValue);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода объекта
			/// </summary>
			/// <returns>Хеш-код объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Int32 GetHashCode()
			{
				return mValue.GetHashCode() ^ base.GetHashCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return mValue.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на равенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус равенства</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(TUnitValue<TUnit> left, TUnitValue<TUnit> right)
			{
				return left.Equals(right);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на неравенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус неравенство</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(TUnitValue<TUnit> left, TUnitValue<TUnit> right)
			{
				return !(left == right);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.Double"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="System.Double"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator Double(TUnitValue<TUnit> value)
			{
				return value.mValue;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.BoolValue"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="TUnitValue<TUnit>"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator TUnitValue<TUnit>(Double value)
			{
				return new TUnitValue<TUnit>(value);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация объекта в строку
			/// </summary>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public String SerializeToString()
			{
				return (mValue.ToString());
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================