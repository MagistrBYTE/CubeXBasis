//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Подсистема иерархической модели
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternHierarchyModelViewLast.cs
*		Определение интерфейса модели и шаблонов данных для модели которая является последней в иерархии (замыкает иерархию) 
*	с поддержкой концепции просмотра и управления.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternHierarchy
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий механизм объекта модели с поддержкой концепции просмотра и управления который участвует в иерархических
		/// отношениях, но не содержит дочерних данных
		/// </summary>
		/// <typeparam name="TCollectionModelView">Соответствующий тип коллекции</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class ModelHierarchyViewLast<TCollectionModelView> : ModelView<TCollectionModelView>, ICubeXModelHierarchyView, 
			ICubeXModelHierarchyLast
			where TCollectionModelView : class, ICubeXCollectionModelView
		{
			#region ======================================= СВОЙСТВА ICubeXCollectionModel ============================
			/// <summary>
			/// Список моделей коллекции
			/// </summary>
			[Browsable(false)]
			public IList IModels
			{
				get
				{
					return (null);
				}
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXControllerModelView ========================
			/// <summary>
			/// Текущий выбранный элемент
			/// </summary>
			public ICubeXModelView ISelectedModel
			{
				get { return (null); }
				set { }
			}

			/// <summary>
			/// Текущий элемент для отображения
			/// </summary>
			public ICubeXModelView IPresentedModel
			{
				get { return (null); }
				set { }
			}

			/// <summary>
			/// Возможность выбора нескольких элементов
			/// </summary>
			[Browsable(false)]
			public Boolean IsMultiSelected
			{
				get { return (false); }
				set { }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public ModelHierarchyViewLast()
				: this(String.Empty)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelHierarchyViewLast(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override System.Object Clone()
			{
				ModelHierarchyViewLast<TCollectionModelView> clone = new ModelHierarchyViewLast<TCollectionModelView>(mName);
				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXControllerModel ==============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связи с коллекцией для элементов списка
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void UpdateOwnerLink()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на поддержку модели
			/// </summary>
			/// <remarks>
			/// Поддержка модели подразумевает возможность добавить ее в список элементов по различным критериям 
			/// </remarks>
			/// <param name="model">Модель</param>
			/// <returns>Статус поддержки модели</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean IsSupportModel(ICubeXModelOwned model)
			{
				return (false);
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXControllerModelView ==========================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Выключение выбора всех моделей кроме исключаемой
			/// </summary>
			/// <param name="exclude">Исключаемая модель</param>
			//---------------------------------------------------------------------------------------------------------
			public void UnsetAllSelected(ICubeXModelView exclude)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Выключение презентации всех моделей кроме исключаемой
			/// </summary>
			/// <param name="exclude">Исключаемая модель</param>
			//---------------------------------------------------------------------------------------------------------
			public void UnsetAllPresent(ICubeXModelView exclude)
			{

			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс для объекта модели с поддержкой концепции просмотра и управления который участвует в иерархических
		/// отношениях, но не содержит дочерних данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CModelHierarchyViewLast : ModelHierarchyViewLast<ICubeXCollectionModelView>, 
			IComparable<CModelHierarchyViewLast>
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CModelHierarchyViewLast()
				:this(String.Empty)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public CModelHierarchyViewLast(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(CModelHierarchyViewLast other)
			{
				return (mName.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override System.Object Clone()
			{
				CModelHierarchyViewLast clone = new CModelHierarchyViewLast(mName);
				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================