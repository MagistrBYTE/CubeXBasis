//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Подсистема модели данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternCollectionModel.cs
*		Базовый тип коллекции для хранения моделей которые поддерживают отношения владения.
*		Определение базового типа коллекции реализующего минимальный механизм коллекции моделей и интерфейсов определяющих
*	базовый набор допустимых операций с коллекцией моделей.
*		Концепция владения моделей посредством реализации расширенной коллекции (которая сама в свою очередь является 
*	моделью) является основной для построения взаимосвязанных данных и иерархической модели данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reflection;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternModel
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый интерфейс для определения коллекции моделей
		/// </summary>
		/// <remarks>
		/// Сама коллекция в свою очередь также является моделью
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionModel : ICubeXModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Список моделей коллекции
			/// </summary>
			IList IModels { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связи с коллекцией для элементов списка
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void UpdateOwnerLink();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на поддержку модели
			/// </summary>
			/// <remarks>
			/// Поддержка модели подразумевает возможность добавить ее в список элементов по различным критериям 
			/// </remarks>
			/// <param name="model">Модель</param>
			/// <returns>Статус поддержки модели</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean IsSupportModel(ICubeXModelOwned model);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает операцию добавления моделей
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportAdd : ICubeXCollectionModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Принципиальная возможность добавить модель в данный момент 
			/// </summary>
			Boolean IsAddingModel { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание модели без добавления в список элементов
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Созданная модель</returns>
			//---------------------------------------------------------------------------------------------------------
			ICubeXModelOwned CreateModel(String model_name);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание и добавление модели в список элементов
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Созданная модель</returns>
			//---------------------------------------------------------------------------------------------------------
			ICubeXModelOwned AddNewModel(String model_name);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление существующей модели в список элементов
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean AddExistingModel(ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление существующей модели которая гарантировано никому не принадлежит и не находится в списке моделей
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean AddExistingEmptyModel(ICubeXModelOwned model);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает операции вставки моделей
		/// </summary>
		/// <remarks>
		/// Понятие вставки моделей и добавление моделей различное. 
		/// Вставка моделей подразумевает дополнительную логику основанную на позиции модели в списке 
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportInsert : ICubeXCollectionModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Принципиальная возможность вставить модель в данный момент 
			/// </summary>
			Boolean IsInsertingModel { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели в указанную позицию списка
			/// </summary>
			/// <param name="index">Индекс (позиция)</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			void InsertModel(Int32 index, ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели после указанной модели
			/// </summary>
			/// <param name="original">Модель после которой будет произведена вставка</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			void InsertAfterModel(ICubeXModelOwned original, ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели перед указанной моделью
			/// </summary>
			/// <param name="original">Модель перед которой будет произведена вставка</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			void InsertBeforeModel(ICubeXModelOwned original, ICubeXModelOwned model);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает операции удаления моделей
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportRemove : ICubeXCollectionModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Принципиальная возможность удалить модель в данный момент
			/// </summary>
			Boolean IsRemovingModel { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов по указанному имени
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean RemoveModel(String model_name);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов по указанному идентификатору
			/// </summary>
			/// <param name="model_id">Идентификатор модели</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean RemoveModel(Int64 model_id);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean RemoveModel(ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление всех моделей из списка элементов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void ClearModels();
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает операции поиска моделей
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportFind : ICubeXCollectionModel
		{
			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существовании модели в списке элементов
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус существования модели</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean ExistsModel(ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск индекса указанной модели
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Индекс модели или -1 если модель не найдена</returns>
			//---------------------------------------------------------------------------------------------------------
			Int32 IndexOfModel(ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск модели по указанному имени
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Найденный модель или null</returns>
			//---------------------------------------------------------------------------------------------------------
			ICubeXModelOwned GetModelFromName(String model_name);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск модели по указанному идентификатору
			/// </summary>
			/// <param name="id">Идентификатор модели</param>
			/// <returns>Найденная модель или null</returns>
			//---------------------------------------------------------------------------------------------------------
			ICubeXModelOwned GetModelFromId(Int64 id);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает операции перемещения моделей
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportMove : ICubeXCollectionModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Принципиальная возможность переместить модель в данный момент 
			/// </summary>
			Boolean IsMovingModel { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перемещение модели вверх по списку элементов
			/// </summary>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			void MoveUpModel(ICubeXModelOwned model);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перемещение модели вниз по списку элементов
			/// </summary>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			void MoveDownModel(ICubeXModelOwned model);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс коллекции которая поддерживает пользовательскии операции над моделями
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXCollectionSupportAction : ICubeXCollectionModel
		{
			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Фильтрация моделей по предикату
			/// </summary>
			/// <param name="match">Предикат</param>
			/// <returns>Статус прохождение фильтрации</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean FiltredModel(Predicate<ICubeXModelOwned> match);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Посещение моделей указанным посетителем
			/// </summary>
			/// <param name="on_visitor">Делегат посетителя</param>
			//---------------------------------------------------------------------------------------------------------
			void VisitModel(Action<ICubeXModelOwned> on_visitor);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий коллекцию моделей которая полноценно управляет своими элементами(моделями) и
		/// и реализует все доступные операции для работы с коллекциям
		/// </summary>
		/// <typeparam name="TModel">Тип модели</typeparam>
		/// <typeparam name="TList">Тип списка</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class CollectionModel<TModel, TList> : CModel, IEnumerator, IEnumerable,
			IEnumerator<CollectionModel<TModel, TList>>, IEnumerable<CollectionModel<TModel, TList>>, ICubeXCollectionModel,
			ICubeXCollectionSupportAdd, ICubeXCollectionSupportInsert, ICubeXCollectionSupportRemove, ICubeXCollectionSupportFind,
			ICubeXCollectionSupportMove, ICubeXCollectionSupportAction, ICubeXNotify
			where TModel : ICubeXModelOwned
			where TList : ListArray<TModel>, new()
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			protected static readonly PropertyChangedEventArgs PropertyArgsIsAddingModel = new PropertyChangedEventArgs(nameof(IsAddingModel));
			protected static readonly PropertyChangedEventArgs PropertyArgsIsRemovingModel = new PropertyChangedEventArgs(nameof(IsRemovingModel));
			protected static readonly PropertyChangedEventArgs PropertyArgsIsMovingModel = new PropertyChangedEventArgs(nameof(IsMovingModel));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			protected internal TList mModels;
			// Поддержка перечисления
			protected internal Int32 mEnumeratorIndex;
			#endregion

			#region ======================================= СВОЙСТВА ICubeXCollectionModel ============================
			/// <summary>
			/// Список моделей коллекции
			/// </summary>
			[Browsable(false)]
			public IList IModels
			{
				get
				{
					if (mModels == null)
					{
						mModels = new TList();
						RaiseCreatedModels();
					}

					return (mModels);
				}
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXCollectionSupportAdd =======================
			/// <summary>
			/// Принципиальная возможность добавить модель в данный момент
			/// </summary>
			[Browsable(false)]
			public virtual Boolean IsAddingModel
			{
				get { return (true); }
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXCollectionSupportInsert ====================
			/// <summary>
			/// Принципиальная возможность вставить модель в данный момент 
			/// </summary>
			[Browsable(false)]
			public virtual Boolean IsInsertingModel
			{
				get { return (true); }
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXCollectionSupportRemove ====================
			/// <summary>
			/// Принципиальная возможность удалить модель в данный момент
			/// </summary>
			[Browsable(false)]
			public virtual Boolean IsRemovingModel
			{
				get { return (true); }
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXCollectionSupportMove ======================
			/// <summary>
			/// Принципиальная возможность переместить модель в данный момент 
			/// </summary>
			[Browsable(false)]
			public virtual Boolean IsMovingModel
			{
				get { return (true); }
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXSupportViewInspector =======================
			/// <summary>
			/// Отображаемое имя типа в инспекторе свойств
			/// </summary>
			[Browsable(false)]
			public override String InspectorTypeName
			{
				get { return (nameof(CollectionModel<TModel, TList>)); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CollectionModel()
				: this(String.Empty)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя коллекции</param>
			//---------------------------------------------------------------------------------------------------------
			public CollectionModel(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override System.Object Clone()
			{
				CollectionModel<TModel, TList> clone = new CollectionModel<TModel, TList>();
				clone.Name = mName;

				for (Int32 i = 0; i < mModels.Count; i++)
				{
					clone.AddExistingModel((TModel)mModels[i].Clone());
				}

				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= МЕТОДЫ IDisposable ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освобождение управляемых ресурсов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Dispose()
			{
				Dispose(true);
				GC.SuppressFinalize(this);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освобождение управляемых ресурсов
			/// </summary>
			/// <param name="disposing">Статус освобождения</param>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void Dispose(Boolean disposing)
			{
				// Освобождаем только управляемые ресурсы
				if (disposing)
				{
				}

				// Освобождаем неуправляемые ресурсы
			}
			#endregion

			#region ======================================= МЕТОДЫ IEnumerator ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Текущий объект
			/// </summary>
			/// <returns>Текущий объект</returns>
			//---------------------------------------------------------------------------------------------------------
			Object IEnumerator.Current
			{
				get
				{
					return (this);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Текущий объект
			/// </summary>
			/// <returns>Текущий объект</returns>
			//---------------------------------------------------------------------------------------------------------
			CollectionModel<TModel, TList> IEnumerator<CollectionModel<TModel, TList>>.Current
			{
				get
				{
					return (this);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Возможность продвинуться вперед
			/// </summary>
			/// <returns>Статус возможности продвинуться вперед</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean IEnumerator.MoveNext()
			{
				mEnumeratorIndex++;
				return (mEnumeratorIndex == 1);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Переустановка объекта
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void IEnumerator.Reset()
			{
				mEnumeratorIndex = 0;
			}
			#endregion

			#region ======================================= МЕТОДЫ IEnumerable ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение перечислителя
			/// </summary>
			/// <returns>Перечислитель</returns>
			//---------------------------------------------------------------------------------------------------------
			IEnumerator IEnumerable.GetEnumerator()
			{
				return (this);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение перечислителя
			/// </summary>
			/// <returns>Перечислитель</returns>
			//---------------------------------------------------------------------------------------------------------
			IEnumerator<CollectionModel<TModel, TList>> IEnumerable<CollectionModel<TModel, TList>>.GetEnumerator()
			{
				return (this);
			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание списка моделей.
			/// Метод автоматически вызывается если при доступе к списку моделей он оказывается не инициализированным
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseCreatedModels()
			{

			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXCollectionModel ==============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связи с коллекцией для элементов списка
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void UpdateOwnerLink()
			{
				for (Int32 i = 0; i < mModels.Count; i++)
				{
					mModels[i].IOwner = this;
					if (mModels[i] is ICubeXCollectionModel)
					{
						ICubeXCollectionModel collection_model = mModels[i] as ICubeXCollectionModel;
						collection_model.UpdateOwnerLink();
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на поддержку модели
			/// </summary>
			/// <remarks>
			/// Поддержка модели подразумевает возможность добавить ее в список элементов по различным критериям 
			/// </remarks>
			/// <param name="model">Модель</param>
			/// <returns>Статус поддержки модели</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean IsSupportModel(ICubeXModelOwned model)
			{
				return (model is TModel);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отсоединение родителя от указанного модели
			/// </summary>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			protected void UnsetParentItem(TModel model)
			{
				// Если есть родительский элемент и он другой
				if (model != null && model.IOwner != null)
				{
					if (model.IOwner != this)
					{
						// Если поддерживает операцию удаления
						if (model.IOwner is ICubeXCollectionSupportRemove)
						{
							ICubeXCollectionSupportRemove operation_remove = model.IOwner as ICubeXCollectionSupportRemove;
							if (operation_remove.IsRemovingModel)
							{
								operation_remove.RemoveModel(model);
							}
							else
							{
#if UNITY_2017_1_OR_NEWER
								UnityEngine.Debug.LogErrorFormat("Model <{0}> must be deleted but not currently possible", typeof(TModel).Name);
#else
								XLogger.LogError(String.Format("Model <{0}> must be deleted but not currently possible", typeof(TModel).Name));
#endif
							}
						}
						else
						{
#if UNITY_2017_1_OR_NEWER
							UnityEngine.Debug.LogErrorFormat("Model <{0}> must be removed but interface ICubeXCollectionSupportRemove is not supported",
									typeof(TModel).Name);
#else
							XLogger.LogError(String.Format("Model <{0}> must be removed but interface ICubeXCollectionSupportRemove is not supported",
								typeof(TModel).Name));
#endif
						}
					}
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ СОЗДАНИЯ ЭЛЕМЕНТОВ =================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание новой модели
			/// </summary>
			/// <remarks>
			/// Происходит только создание модели.
			/// Сама модель НЕ добавляется в список элементов
			/// </remarks>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual ICubeXModelOwned CreateModel(String model_name)
			{
				if (typeof(TModel).IsInterface)
				{
#if UNITY_2017_1_OR_NEWER
					UnityEngine.Debug.LogErrorFormat("Unable to create object by interface: {0}", typeof(TModel).Name);
#else
					XLogger.LogError(String.Format("Unable to create object by interface: {0}", typeof(TModel).Name));
#endif
					return (default(TModel));
				}

				if (typeof(TModel).IsAbstract)
				{
#if UNITY_2017_1_OR_NEWER
					UnityEngine.Debug.LogErrorFormat("Unable to create an abstract class object: {0}", typeof(TModel).Name);
#else
					XLogger.LogError(String.Format("Unable to create an abstract class object: {0}", typeof(TModel).Name));
#endif
					return (default(TModel));
				}

				TModel item = (TModel)Activator.CreateInstance(typeof(TModel));
				item.Name = model_name;
				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание новой модели (с помощью конструктора по умолчанию) указанного типа
			/// </summary>
			/// <remarks>
			/// Происходит только создание модели указанного типа.
			/// Сама модель НЕ добавляется в список элементов
			/// </remarks>
			/// <typeparam name="TModelEx">Тип модели</typeparam>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModelEx CreateModelOfType<TModelEx>() where TModelEx : TModel, new()
			{
				TModelEx item = new TModelEx();
				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание новой модели (с помощью конструктора по умолчанию) указанного типа
			/// </summary>
			/// <remarks>
			/// Происходит только создание модели указанного типа.
			/// Сама модель НЕ добавляется в список элементов
			/// </remarks>
			/// <typeparam name="TModelEx">Тип модели</typeparam>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModelEx CreateModelOfType<TModelEx>(String model_name) where TModelEx : TModel, new()
			{
				TModelEx item = new TModelEx();
				item.Name = model_name;
				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание новой модели по указанному имени типа
			/// </summary>
			/// <remarks>
			/// Происходит только создание модели указанного типа.
			/// Сама модель НЕ добавляется в список элементов
			/// </remarks>
			/// <param name="type_name">Имя типа модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModel CreateModelOfTypeName(String type_name)
			{
				return (CreateModelOfTypeName(type_name, "Новый элемент"));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание новой модели по указанному имени типа
			/// </summary>
			/// <remarks>
			/// Происходит только создание модели указанного типа.
			/// Сама модель НЕ добавляется в список элементов
			/// </remarks>
			/// <param name="type_name">Имя типа модели</param>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModel CreateModelOfTypeName(String type_name, String model_name)
			{
				//
				// TODO Реализовать правильно
				//
				TModel item = default(TModel);
				return (item);
			}
			#endregion

			#region ======================================= МЕТОДЫ ДОБАВЛЕНИЯ МОДЕЛЕЙ =================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание и добавление созданной модели в список элементов
			/// </summary>
			/// <remarks>
			/// Происходит создание модели и добавление ее в список элементов
			/// </remarks>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual ICubeXModelOwned AddNewModel(String model_name)
			{
				ICubeXModelOwned item = CreateModel(model_name);
				if (item != null)
				{
					item.IOwner = this;
					mModels.Add(item);
				}

				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание (с помощью конструктора по умолчанию) и добавление созданной модели в список элементов
			/// </summary>
			/// <typeparam name="TModelEx">Тип модели</typeparam>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModelEx AddNewModelOfType<TModelEx>() where TModelEx : TModel, new()
			{
				TModelEx item = CreateModelOfType<TModelEx>();
				item.IOwner = this;
				mModels.Add(item);

				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание (с помощью конструктора по умолчанию) и добавление созданной модели в список элементов
			/// </summary>
			/// <typeparam name="TModelEx">Тип модели</typeparam>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModelEx AddNewModelOfType<TModelEx>(String model_name) where TModelEx : TModel, new()
			{
				TModelEx item = CreateModelOfType<TModelEx>(model_name);
				item.IOwner = this;
				mModels.Add(item);

				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание и добавление созданной модели в список элементов
			/// </summary>
			/// <remarks>
			/// Происходит создание модели указанного типа и добавление ее в список элементов
			/// </remarks>
			/// <param name="type_name">Имя типа модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModel AddNewModelOfTypeName(String type_name)
			{
				return (AddNewModelOfTypeName(type_name, "Новый элемент"));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание и добавление созданной модели в список элементов
			/// </summary>
			/// <remarks>
			/// Происходит создание модели указанного типа и добавление ее в список элементов
			/// </remarks>
			/// <param name="type_name">Имя типа модели</param>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Модель</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TModel AddNewModelOfTypeName(String type_name, String model_name)
			{
				TModel item = CreateModelOfTypeName(type_name, model_name);

				if (item != null)
				{
					item.IOwner = this;
					mModels.Add(item);
				}

				return (item);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление существующей модели
			/// </summary>
			/// <remarks>
			/// Происходит только добавление существующей модели.
			/// Если модель принадлежит другой коллекции, то модель будет сначала удалена из ее списка
			/// </remarks>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean AddExistingModel(ICubeXModelOwned model)
			{
				if (model == null) return (false);

				// Только если отсутствует
				if (mModels.Contains(model) == false)
				{
					// Отсоединяем родителя
					UnsetParentItem((TModel)model);

					// Присоединение родителя к указанной модели
					model.IOwner = this;

					mModels.Add(model);
					return (true);
				}
				else
				{
#if UNITY_2017_1_OR_NEWER
					UnityEngine.Debug.LogErrorFormat("This model <{0}> is already in the list <{1}>", model.Name, mName);
#else
					XLogger.LogError(String.Format("This model <{0}> is already in the list <{1}>", model.Name, mName));
#endif
					return (false);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление существующей модели которая гарантировано никому не принадлежит и не находится в списке моделей
			/// </summary>
			/// <remarks>
			/// Происходит только добавление существующей модели.
			/// </remarks>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean AddExistingEmptyModel(ICubeXModelOwned model)
			{
				if (model == null) return (false);

				// Присоединение родителя к указанной модели
				model.IOwner = this;

				mModels.Add(model);

				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление списка моделей
			/// </summary>
			/// <remarks>
			/// Происходит только добавление существующих моделей из списка без дополнительных проверок и операций
			/// </remarks>
			/// <param name="models">Список моделей</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean AddExistingModels(IList<TModel> models)
			{
				if (models == null) return (false);

				// Присваиваем родителя к указанным моделям
				for (Int32 i = 0; i < models.Count; i++)
				{
					models[i].IOwner = this;
				}

				// Добавлем
				mModels.AddItems(models);

				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление списка моделей
			/// </summary>
			/// <remarks>
			/// Происходит только добавление существующих моделей из списка без дополнительных проверок и операций
			/// </remarks>
			/// <param name="models">Список моделей</param>
			/// <returns>Статус успешности добавления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean AddExistingModels(IEnumerable<ICubeXModelOwned> models)
			{
				if (models == null) return (false);

				// Добавлем
				foreach (var model in models)
				{
					// Присоединение родителя к указанной модели
					model.IOwner = this;

					// Добавляем
					mModels.Add(model);
				}

				return (true);
			}
			#endregion

			#region ======================================= МЕТОДЫ ВСТАВКИ МОДЕЛЕЙ ====================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели в указанную позицию
			/// </summary>
			/// <param name="index">Позиция вставки</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void InsertModel(Int32 index, ICubeXModelOwned model)
			{
				if (model == null) return;

				// Только если отсутствует
				if (mModels.Contains(model) == false)
				{
					// Отсоединяем родителя
					UnsetParentItem((TModel)model);

					// Присоединение родителя к указанной модели
					model.IOwner = this;

					mModels.Insert(index, model);
				}
				else
				{
#if UNITY_2017_1_OR_NEWER
					UnityEngine.Debug.LogErrorFormat("This model <{0}> is already in the list", model.Name);
#else
					XLogger.LogError(String.Format("This model <{0}> is already in the list", model.Name));
#endif
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели после указанной модели
			/// </summary>
			/// <param name="original">Модель после которой будет произведена вставка</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void InsertAfterModel(ICubeXModelOwned original, ICubeXModelOwned model)
			{
				if (model == null) return;

				Int32 index = mModels.IndexOf(original);
				InsertModel(index + 1, model);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка модели перед указанной моделью
			/// </summary>
			/// <param name="original">Модель перед которой будет произведена вставка</param>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void InsertBeforeModel(ICubeXModelOwned original, ICubeXModelOwned model)
			{
				if (model == null) return;

				Int32 index = mModels.IndexOf(original);
				InsertModel(index, model);
			}
			#endregion

			#region ======================================= МЕТОДЫ УДАЛЕНИЯ МОДЕЛЕЙ ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов по указанному имени
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean RemoveModel(String model_name)
			{
				Boolean status = false;
				for (Int32 i = 0; i < mModels.Count; i++)
				{
					if (mModels[i].Name == model_name)
					{
						status = RemoveModel(mModels[i]);
						break;
					}
				}

				return (status);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов по указанному идентификатору
			/// </summary>
			/// <param name="id">Идентификатор модели</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean RemoveModel(Int64 id)
			{
				Boolean status = false;
				for (Int32 i = 0; i < mModels.Count; i++)
				{
					if (mModels[i].ID == id)
					{
						status = RemoveModel(mModels[i]);
						break;
					}
				}

				return (status);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление модели из списка элементов
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean RemoveModel(ICubeXModelOwned model)
			{
				if (model == null) return false;

				// 2) Удаляем элемент
				if (mModels.Remove((TModel)model))
				{
					return (true);
				}

				return (false);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление моделей по предикату
			/// </summary>
			/// <param name="match">Предикат</param>
			/// <returns>Количество удаленных моделей</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 RemoveModelIf(Predicate<TModel> match)
			{
				return (mModels.RemoveAll(match));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление всех моделей из списка элементов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void ClearModels()
			{
				mModels.Clear();
			}
			#endregion

			#region ======================================= МЕТОДЫ ПОИСКА МОДЕЛЕЙ =====================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существовании модели в списке элементов
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Статус существования модели</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean ExistsModel(ICubeXModelOwned model)
			{
				if (model == null) return (false);

				for (Int32 i = 0; i < mModels.Count; i++)
				{
					if (mModels[i].Equals(model))
					{
						return (true);
					}
				}

				return (false);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск индекса указанной модели
			/// </summary>
			/// <param name="model">Модель</param>
			/// <returns>Индекс модели или -1 если модель не найдена</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Int32 IndexOfModel(ICubeXModelOwned model)
			{
				return (mModels.IndexOf(model));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск модели по указанному имени
			/// </summary>
			/// <param name="model_name">Имя модели</param>
			/// <returns>Найденный модель или null</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual ICubeXModelOwned GetModelFromName(String model_name)
			{
				for (Int32 i = 0; i < mModels.Count; i++)
				{
					if (mModels[i].Name == model_name)
					{
						return (mModels[i]);
					}
				}

				return (default(TModel));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск модели по указанному идентификатору
			/// </summary>
			/// <param name="id">Идентификатор модели</param>
			/// <returns>Найденная модель или null</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual ICubeXModelOwned GetModelFromId(Int64 id)
			{
				for (Int32 i = 0; i < mModels.Count; i++)
				{
					if (mModels[i].ID == id)
					{
						return (mModels[i]);
					}
				}

				return (default(TModel));
			}
			#endregion

			#region ======================================= МЕТОДЫ ГРУППИРОВАНИЯ ======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение списка групп моделей сгруппированных по указанному свойству
			/// </summary>
			/// <typeparam name="TSet">Тип набора</typeparam>
			/// <param name="property_name">Имя свойства</param>
			/// <returns>Список групп моделей</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual ListArray<TSet> GetGroupedByProperty<TSet>(String property_name) 
				where TSet : class, ICubeXCollectionSupportAdd, ICubeXGroupHierarchy, new()
			{
				return (mModels.GetGroupedByProperty<TSet>(property_name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Группирование моделей по указанному набору свойств
			/// </summary>
			/// <typeparam name="TSet">Тип набора</typeparam>
			/// <param name="property_names">Набор свойств для группирования</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void GroupingByProperties<TSet>(params String[] property_names)
				where TSet : class, ICubeXCollectionSupportAdd, ICubeXGroupHierarchy, new()
			{
				GroupingByProperties<TSet, TModel>(mModels, property_names);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Группирование моделей по указанному набору свойств из переданного списка моделей
			/// </summary>
			/// <typeparam name="TSet">Тип набора</typeparam>
			/// <typeparam name="TItem">Тип модели списка</typeparam>
			/// <param name="source_models">Список моделей</param>
			/// <param name="property_names">Набор свойств для группирования</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void GroupingByProperties<TSet, TItem>(ListArray<TItem> source_models, params String[] property_names)
				where TSet : class, ICubeXCollectionSupportAdd, ICubeXGroupHierarchy, new()
				where TItem : ICubeXModelOwned
			{
				// Получаем первый уровень группирования
				String property_name_one = property_names[0];

				// Список групп
				ListArray<TSet> groups = source_models.GetGroupedByProperty<TSet>(property_name_one);

				// Если группы есть
				if (groups.Count > 0)
				{
					this.ClearModels();

					// Добавляем группы
					for (Int32 i = 0; i < groups.Count; i++)
					{
						this.AddExistingEmptyModel(groups[i] as ICubeXModelOwned);

						// Группируем второй уровень
						if (property_names.Length > 1)
						{
							ICubeXGroupHierarchy group_hierarchy = groups[i] as ICubeXGroupHierarchy;
							if (group_hierarchy != null)
							{
								String[] property_names_1 = XArray.RemoveFirst(property_names);
								group_hierarchy.GroupingByProperties<TSet>(property_names_1);
							}
						}
					}
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ПЕРЕМЕЩЕНИЯ МОДЕЛЕЙ ================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перемещение модели вверх по списку элементов
			/// </summary>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void MoveUpModel(ICubeXModelOwned model)
			{
				if (model == null) return;
				Int32 index = mModels.IndexOf(model);
				if (index > 0)
				{
					mModels.MoveUp(index);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перемещение модели вниз по списку элементов
			/// </summary>
			/// <param name="model">Модель</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void MoveDownModel(ICubeXModelOwned model)
			{
				if (model == null) return;
				Int32 index = mModels.IndexOf(model);
				if (index > -1 && index < mModels.Count)
				{
					mModels.MoveDown(index);
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ПОЛЬЗОВАТЕЛЬСКИХ ОПЕРАЦИЙ ==========================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Фильтрация моделей по предикату
			/// </summary>
			/// <param name="match">Предикат фильтрации</param>
			/// <returns>Статус прохождение фильтрации</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean FiltredModel(Predicate<ICubeXModelOwned> match)
			{
				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Посещение моделей указанным посетителем
			/// </summary>
			/// <param name="on_visitor">Делегат посетителя</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void VisitModel(Action<ICubeXModelOwned> on_visitor)
			{

			}
			#endregion

			#region ======================================= МЕТОДЫ НОТИФИКАЦИИ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данной коллекции о начале изменении данных указанной модели
			/// </summary>
			/// <param name="model">Модель данные которой будут меняться</param>
			/// <param name="data_name">Имя данных</param>
			/// <returns>Статус разрешения/согласования изменения данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean OnNotifyUpdating(System.Object model, String data_name)
			{
				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данной коллекции об окончании изменении данных указанной модели
			/// </summary>
			/// <param name="model">Модель данные которой изменились</param>
			/// <param name="data_name">Имя данных</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnNotifyUpdated(System.Object model, String data_name)
			{

			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий коллекцию моделей которая полноценно управляет своими элементами(моделями) и
		/// и реализует все доступные операции для работы с коллекциям
		/// </summary>
		/// <typeparam name="TModel">Тип модели</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class CollectionModel<TModel> : CollectionModel<TModel, ListArray<TModel>>
			where TModel : ICubeXModelOwned
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CollectionModel()
				: this(String.Empty)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя коллекции</param>
			//---------------------------------------------------------------------------------------------------------
			public CollectionModel(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override System.Object Clone()
			{
				CollectionModel<TModel> clone = new CollectionModel<TModel>();
				clone.Name = mName;

				for (Int32 i = 0; i < mModels.Count; i++)
				{
					clone.AddExistingModel((TModel)mModels[i].Clone());
				}

				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================