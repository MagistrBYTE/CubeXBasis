//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Подсистема модели данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternModel.cs
*		Определение интерфейса модели.
*		Модель представляет собой концепцию объекта, который уведомляет об изменении своих свойств посредством 
*	унифицированного интерфейса. Также модель поддерживает имя, уникальный идентификатор. При этом модель может скопировать
*	свои данные с любого объекта и создать свою копию.
*		Нужно отметь, что модель это не чисто объект логики, она также может содержать свойства используемые при её отображении.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CorePatternModel Подсистема модели данных
		//! Подсистема модели данных определяет концепцию модели – расширенного объекта, который уведомляет об изменении
		//! своих свойств посредством унифицированного интерфейса, обладает именем, уникальным идентификатором, может
		//! скопировать свои данные с любого объекта и создать свою копию.
		//! \ingroup CorePattern
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения модели
		/// </summary>
		/// <remarks>
		/// Модель представляет собой концепцию объекта, который уведомляет об изменении своих свойств посредством 
		/// унифицированного интерфейса, поддерживает имя, уникальный идентификатор, может скопировать свои данные с 
		/// любого объекта и создать свою копию 
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXModel : ICubeXIdentifierID, ICloneable, ICubeXCopyParameters
		{
			/// <summary>
			/// Наименование объекта
			/// </summary>
			String Name { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий минимальный механизм модели
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CModel : PropertyChangedBase, ICubeXModel, ICubeXDuplicate<CModel>, ICubeXSupportViewInspector,
			IComparable<ICubeXModel>, IComparable<CModel>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			//
			// Константы для информирования об изменении свойств
			//
			// Идентификация
			protected static readonly PropertyChangedEventArgs PropertyArgsName = new PropertyChangedEventArgs(nameof(Name));
			protected static readonly PropertyChangedEventArgs PropertyArgsID = new PropertyChangedEventArgs(nameof(ID));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
			[CubeXDisplayName(nameof(Name))]
#endif
			protected internal String mName = "";
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
			[UnityEngine.HideInInspector]
#endif
			protected internal Int32 mID;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ИДЕНТИФИКАЦИЯ
			//
			/// <summary>
			/// Наименование объекта
			/// </summary>
			[DisplayName("Наименование")]
			[Description("Наименование объекта")]
			[Category(XGroupDesc.ID)]
			[CubeXPropertyOrder(0)]
			public virtual String Name
			{
				get { return (mName); }
				set
				{
					mName = value;
					NotifyPropertyChanged(PropertyArgsName);
					RaiseNameChanged();
				}
			}

			/// <summary>
			/// Уникальный идентификатор объекта
			/// </summary>
			[DisplayName("ID")]
			[Description("Уникальный идентификатор объекта")]
			[Category(XGroupDesc.ID)]
			[CubeXPropertyOrder(100)]
			public virtual Int32 ID
			{
				get { return (mID); }
				set
				{
					mID = value;
					NotifyPropertyChanged(PropertyArgsID);
				}
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXSupportViewInspector =======================
			/// <summary>
			/// Отображаемое имя типа в инспекторе свойств
			/// </summary>
			[Browsable(false)]
			public virtual String InspectorTypeName
			{
				get { return (nameof(CModel)); }
			}

			/// <summary>
			/// Отображаемое имя объекта в инспекторе свойств
			/// </summary>
			[Browsable(false)]
			public virtual String InspectorObjectName
			{
				get
				{
					if (String.IsNullOrEmpty(mName))
					{
						return ("<Без имени>");
					}
					else
					{
						return (mName);
					}
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CModel()
				: this(String.Empty)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public CModel(String name)
			{
				mName = name;
				mID = GenerateID();
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(ICubeXModel other)
			{
				return (mName.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(CModel other)
			{
				return (mName.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual System.Object Clone()
			{
				CModel clone = new CModel(mName);
				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Наименование объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение имени объекта.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseNameChanged()
			{
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXCopyParameters ===============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Копирование параметров с указанного объекта
			/// </summary>
			/// <param name="source_object">Объект источник с которого будут скопированы параметры</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void CopyParameters(System.Object source_object)
			{
				if (source_object != null && source_object is ICubeXModel)
				{
					ICubeXModel model = source_object as ICubeXModel;
					Name = model.Name;
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXDuplicate ====================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение дубликата объекта
			/// </summary>
			/// <returns>Дубликат объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual CModel Duplicate()
			{
				return (Clone() as CModel);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Генерация уникального идентификатора
			/// </summary>
			/// <returns>Уникальный идентификатор</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Int32 GenerateID()
			{
				return ((GetHashCode() << 32) + (mName.GetHashCode()));
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================