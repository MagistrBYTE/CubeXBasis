//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Подсистема модели данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternModelView.cs
*		Определение интерфейса модели которая поддерживает концепцию просмотра и управления.
*		Концепция просмотра и управления модели предусматривает определение помимо бизнес логики, дополнительных данных, 
*	которые нужны для взаимодействия с пользовательским интерфейсом.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternModel
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения модели которая поддерживает концепцию просмотра и управления
		/// </summary>
		/// <remarks>
		/// Интерфейс предусматривает определения явных свойств характерных для объекта представления
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXModelView : ICubeXModelOwned
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Доступность элемента
			/// </summary>
			/// <remarks>
			/// Подразумевается некая логическая доступность элемента.
			/// Активировано может быть для нескольких элементов списка
			/// </remarks>
			Boolean IsEnabled { get; set; }

			/// <summary>
			/// Выбор элемента
			/// </summary>
			/// <remarks>
			/// Подразумевает выбор элемента пользователем для просмотра свойств.
			/// По умолчанию может быть активировано только для одного элемента списка
			/// </remarks>
			Boolean IsSelected { get; set; }

			/// <summary>
			/// Выбор элемента
			/// </summary>
			/// <remarks>
			/// Подразумевает выбор элемента пользователем для каких-либо действий.
			/// Активировано может быть для нескольких элементов списка
			/// </remarks>
			Boolean? IsChecked { get; set; }

			/// <summary>
			/// Отображение элемента
			/// </summary>
			/// <remarks>
			/// Подразумевает отображение элемента
			/// По умолчанию может быть активировано только для одного элемента списка
			/// </remarks>
			Boolean IsPresented { get; set; }
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий минимальный механизм модели которая поддерживает концепцию просмотра и управления 
		/// и которой владеет коллекция
		/// </summary>
		/// <typeparam name="TCollectionModelView">Соответствующий тип коллекции для отображения моделей</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class ModelView<TCollectionModelView> : ModelOwned<TCollectionModelView>, ICubeXModelView
			where TCollectionModelView : ICubeXCollectionModelView
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			protected static readonly PropertyChangedEventArgs PropertyArgsIsEnabled = new PropertyChangedEventArgs(nameof(IsEnabled));
			protected static readonly PropertyChangedEventArgs PropertyArgsIsSelected = new PropertyChangedEventArgs(nameof(IsSelected));
			protected static readonly PropertyChangedEventArgs PropertyArgsIsChecked = new PropertyChangedEventArgs(nameof(IsChecked));
			protected static readonly PropertyChangedEventArgs PropertyArgsIsPresented = new PropertyChangedEventArgs(nameof(IsPresented));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			protected internal Boolean mIsEnabled;
			protected internal Boolean mIsSelected;
			protected internal Boolean? mIsChecked;
			protected internal Boolean mIsPresented;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Доступность элемента
			/// </summary>
			[Browsable(false)]
			public Boolean IsEnabled
			{
				get { return (mIsEnabled); }
				set
				{
					if (mIsEnabled != value)
					{
						mIsEnabled = value;
						NotifyPropertyChanged(PropertyArgsIsEnabled);
						RaiseIsEnabledChanged();
					}
				}
			}

			/// <summary>
			/// Выбор элемента
			/// </summary>
			[Browsable(false)]
			public Boolean IsSelected
			{
				get { return (mIsSelected); }
				set
				{
					if (mIsSelected != value)
					{
						mIsSelected = value;
						NotifyPropertyChanged(PropertyArgsIsSelected);
						RaiseIsSelectedChanged();
					}
				}
			}

			/// <summary>
			/// Выбор элемента
			/// </summary>
			[Browsable(false)]
			public Boolean? IsChecked
			{
				get { return (mIsChecked); }
				set
				{
					if (mIsChecked != value)
					{
						mIsChecked = value;
						NotifyPropertyChanged(PropertyArgsIsChecked);
						RaiseIsCheckedChanged();
					}
				}
			}

			/// <summary>
			/// Отображение элемента
			/// </summary>
			[Browsable(false)]
			public Boolean IsPresented
			{
				get { return (mIsPresented); }
				set
				{
					if (mIsPresented != value)
					{
						mIsPresented = value;
						NotifyPropertyChanged(PropertyArgsIsPresented);
						RaiseIsPresentedChanged();
					}
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public ModelView()
				: this(String.Empty)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelView(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение доступности элемента.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseIsEnabledChanged()
			{
				this.NotifyOwnerUpdated(nameof(IsEnabled));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение выбора элемента.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseIsSelectedChanged()
			{
				this.NotifyOwnerUpdated(nameof(IsSelected));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение выбора элемента.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseIsCheckedChanged()
			{
				this.NotifyOwnerUpdated(nameof(IsChecked));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение статуса отображения элемента.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseIsPresentedChanged()
			{
				if (mIsPresented && mOwner != null)
				{
					mOwner.UnsetAllPresent(this);
				}

				this.NotifyOwnerUpdated(nameof(IsPresented));
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий минимальный механизм модели которая поддерживает концепцию просмотра и управления
		/// и которой владеет коллекция
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CModelView : ModelView<ICubeXCollectionModelView>, IComparable<CModelView>
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CModelView()
				: this(String.Empty)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public CModelView(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(CModelView other)
			{
				return (mName.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override System.Object Clone()
			{
				CModelView clone = new CModelView();
				clone.Name = mName;
				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Имя объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================