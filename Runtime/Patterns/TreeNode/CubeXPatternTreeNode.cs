//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Иерархические структуры данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternTreeNode.cs
*		Определение логической модели базового узла дерева.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.ComponentModel;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CorePatternTreeNode Иерархические структуры данных
		//! Подсистема иерархических структур данных обеспечивает наиболее простую и универсальную и модель 
		//! иерархических отношений.
		//! \ingroup CorePattern
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса представляющего базовый узел дерева
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXTreeNodeBase
		{
			/// <summary>
			/// Уровень вложенности узла
			/// </summary>
			/// <remarks>
			/// Корневые узлы дерева имеют уровень 0
			/// </remarks>
			Int32 Level { get; }

			/// <summary>
			/// Количество дочерних узлов
			/// </summary>
			Int32 CountChild { get; }

			/// <summary>
			/// Статус корневого узла
			/// </summary>
			Boolean IsRoot { get; }

			/// <summary>
			/// Статус узла который не имеет дочерних узлов
			/// </summary>
			Boolean IsLeaf { get; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса представляющего узел дерева
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXTreeNode : ICubeXTreeNodeBase, ICubeXModel
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Родительский узел
			/// </summary>
			ICubeXTreeNode IParentNode { get; set; }

			/// <summary>
			/// Список дочерних узлов
			/// </summary>
			IList<ICubeXTreeNode> IChildren { get; }

			/// <summary>
			/// Родительский идентификатор узла
			/// </summary>
			Int64 ParentNodeID { get; }
			#endregion

			#region ======================================= МЕТОДЫ ===================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связи с родительским узлом для всех дочерних узлов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void UpdateParentLink();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существовании узла в списке дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			/// <returns>Статус существования узла</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean ExistsChildNode(ICubeXTreeNode node);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление узла в список дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			//---------------------------------------------------------------------------------------------------------
			void AddChildNode(ICubeXTreeNode node);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление узла из списка дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			//---------------------------------------------------------------------------------------------------------
			void RemoveChildNode(ICubeXTreeNode node);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление дочерних узлов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void ClearChildNode();

			//--------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Фильтрация дочерних узлов по предикату
			/// </summary>
			/// <param name="match">Предикат</param>
			/// <returns>Истина если узел или его дочерний узел проходят условия проверки предикатом</returns>
			//--------------------------------------------------------------------------------------------------------
			Boolean FiltredNode(Predicate<ICubeXTreeNode> match);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Посещение узлов указанным посетителем
			/// </summary>
			/// <param name="on_visitor">Делегат посетителя</param>
			//---------------------------------------------------------------------------------------------------------
			void VisitNode(Action<ICubeXTreeNode> on_visitor);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый узел дерева
		/// </summary>
		/// <remarks>
		/// Базовый узел дерева является основным для построения иерархических моделей данных
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CTreeNode : PropertyChangedBase, ICubeXTreeNode
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			protected static readonly PropertyChangedEventArgs PropertyArgsName = new PropertyChangedEventArgs(nameof(Name));
			protected static readonly PropertyChangedEventArgs PropertyArgsID = new PropertyChangedEventArgs(nameof(ID));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
#endif
			protected internal String mName = "";
#if (UNITY_2017_1_OR_NEWER)
			[UnityEngine.SerializeField]
#endif
			protected internal Int32 mID;
			protected internal ICubeXTreeNode mParent;
			protected internal IList<ICubeXTreeNode> mChildren;
			#endregion

			#region ======================================= СВОЙСТВА ICubeXTreeNode ===================================
			//
			// ИДЕНТИФИКАЦИЯ
			//
			/// <summary>
			/// Наименование узла
			/// </summary>
			public virtual String Name
			{
				get { return (mName); }
				set
				{
					mName = value;
					NotifyPropertyChanged(PropertyArgsName);
					RaiseNameChanged();
				}
			}

			/// <summary>
			/// Уникальный идентификатор узла
			/// </summary>
			/// <remarks>
			/// Должен быть уникальным в пределах всего дерева 
			/// </remarks>
			[ReadOnly(true)]
			public virtual Int32 ID
			{
				get { return (mID); }
				set { mID = value; }
			}

			/// <summary>
			/// Родительский узел
			/// </summary>
			[Browsable(false)]
			public ICubeXTreeNode IParentNode
			{
				get { return (mParent); }
				set { mParent = value; }
			}

			/// <summary>
			/// Родительский идентификатор узла
			/// </summary>
			[Browsable(false)]
			public Int64 ParentNodeID
			{
				get 
				{
					if (mParent == null)
					{
						return (-1);
					}
					else
					{
						return (mParent.ID);
					}
				}
			}

			/// <summary>
			/// Список дочерних узлов
			/// </summary>
			public IList<ICubeXTreeNode> IChildren
			{
				get { return (mChildren); }
			}

			/// <summary>
			/// Статус наличия дочерних узлов
			/// </summary>
			public Boolean HasChildren
			{
				get { return (mChildren != null && mChildren.Count > 0); }
			}
			#endregion

			#region ======================================= СВОЙСТВА ICubeXTreeNodeBase ===============================
			/// <summary>
			/// Уровень вложенности узла
			/// </summary>
			/// <remarks>
			/// Корневые узлы дерева имеют уровень 0
			/// </remarks>
			public Int32 Level
			{
				get { return (0); }
			}

			/// <summary>
			/// Количество дочерних узлов
			/// </summary>
			public Int32 CountChild 
			{ 
				get { return mChildren.Count; } 
			}

			/// <summary>
			/// Статус корневого узла
			/// </summary>
			public Boolean IsRoot 
			{ 
				get { return (mParent == null); } 
			}

			/// <summary>
			/// Статус узла который не имеет дочерних узлов
			/// </summary>
			public Boolean IsLeaf 
			{ 
				get { return (mChildren.Count == 0); } 
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует данные узла предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CTreeNode()
			{
				mChildren = new List<ICubeXTreeNode>();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные узла указанными значениями
			/// </summary>
			/// <param name="parent">Родительский узел</param>
			//---------------------------------------------------------------------------------------------------------
			public CTreeNode(ICubeXTreeNode parent)
			{
				mParent = parent;
				mChildren = new List<ICubeXTreeNode>();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные узла указанными значениями
			/// </summary>
			/// <param name="name">Название узла</param>
			/// <param name="id">Идентификатор узла</param>
			//---------------------------------------------------------------------------------------------------------
			public CTreeNode(String name, Int32 id)
			{
				mName = name;
				mID = id;
				mChildren = new List<ICubeXTreeNode>();
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение узлов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый узел</param>
			/// <returns>Статус сравнения узлов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(ICubeXTreeNode other)
			{
				return (mName.CompareTo(other.Name));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение копии узла
			/// </summary>
			/// <returns>Копия узла</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual System.Object Clone()
			{
				CTreeNode clone = new CTreeNode();
				clone.Name = mName;
				return (clone);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление узла</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= ИНДЕКСАТОР ================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Индексация дочерних узлов 
			/// </summary>
			/// <param name="index">Индекс узла</param>
			/// <returns>Дочерний узел</returns>
			//---------------------------------------------------------------------------------------------------------
			public ICubeXTreeNode this[Int32 index]
			{
				get { return mChildren[index]; }
			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение имени объекта.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseNameChanged()
			{
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXCopyParameters ===============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Копирование параметров с указанного объекта
			/// </summary>
			/// <param name="source_object">Объект источник с которого будут скопированы параметры</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void CopyParameters(System.Object source_object)
			{
				if (source_object != null && source_object is ICubeXTreeNode)
				{
					ICubeXModel model = source_object as ICubeXTreeNode;
					Name = model.Name;
				}
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связи с родительским узлом для всех дочерних узлов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void UpdateParentLink()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на существовании узла в списке дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			/// <returns>Статус существования узла</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean ExistsChildNode(ICubeXTreeNode node)
			{
				return (false);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление узла в список дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void AddChildNode(ICubeXTreeNode node)
			{
				node.IParentNode = this;
				mChildren.Add(node);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление узла из списка дочерних узлов
			/// </summary>
			/// <param name="node">Узел</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void RemoveChildNode(ICubeXTreeNode node)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление дочерних узлов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void ClearChildNode()
			{
				mChildren.Clear();
			}

			//--------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Фильтрация дочерних узлов по предикату
			/// </summary>
			/// <param name="match">Предикат</param>
			/// <returns>Истина если узел или его дочерний узел проходят условия проверки предикатом</returns>
			//--------------------------------------------------------------------------------------------------------
			public virtual Boolean FiltredNode(Predicate<ICubeXTreeNode> match)
			{
				// Проверяем даный узел
				Boolean result = match(this);

				// Проверяем дочерние узлы
				for (Int32 i = 0; i < mChildren.Count; i++)
				{
					result = mChildren[i].FiltredNode(match);
					if(result)
					{
						result = true;
						break;
					}
				}

				return (result);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Посещение узлов указанным посетителем
			/// </summary>
			/// <param name="on_visitor">Делегат посетителя</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void VisitNode(Action<ICubeXTreeNode> on_visitor)
			{
				// Посещаем даный узел
				on_visitor(this);

				// Посещаем дочерние узлы
				for (Int32 i = 0; i < mChildren.Count; i++)
				{
					mChildren[i].VisitNode(on_visitor);
				}
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================