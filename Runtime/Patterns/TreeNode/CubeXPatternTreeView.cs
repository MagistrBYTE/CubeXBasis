//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Иерархические структуры данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternTreeView.cs
*		Определение базового элемента для отображения всего дерева.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternTreeNode
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс для отображения дерева
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CTreeViewBase
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal CTreeNodeView mRoot;
			protected internal String mSearchString;
			protected internal TStringSearchOption mSearchOption;
			protected internal CTreeNodeView mSelectedNode;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Корневой узел дерева
			/// </summary>
			public CTreeNodeView Root
			{
				get { return (mRoot); }
			}

			/// <summary>
			/// Строка для фильтрования и поиска узлов по имени
			/// </summary>
			public String SearchString
			{
				get { return (mSearchString); }
				set
				{
					if (mSearchString != value)
					{
						mSearchString = value;
						OnFilterd();
					}
				}
			}

			/// <summary>
			/// Опции поиска узлов по имени
			/// </summary>
			public TStringSearchOption SearchOption
			{
				get { return (mSearchOption); }
				set
				{
					if (mSearchOption != value)
					{
						mSearchOption = value;
						OnFilterd();
					}
				}
			}

			/// <summary>
			/// Текущий выбранный узел отображения
			/// </summary>
			public CTreeNodeView SelectedNode
			{
				get { return (mSelectedNode); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CTreeViewBase()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="root">Корневой узел отображения</param>
			//---------------------------------------------------------------------------------------------------------
			public CTreeViewBase(CTreeNodeView root)
			{
				mRoot = root;
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Построение дерева
			/// </summary>
			/// <param name="root">Данные</param>
			//---------------------------------------------------------------------------------------------------------
			public void Build(ICubeXTreeNode root)
			{
				mRoot = CTreeNodeView.Create(root);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Построение дерева
			/// </summary>
			/// <param name="root">Данные</param>
			//---------------------------------------------------------------------------------------------------------
			public void Build(ICubeXTreeNodeViewBuilder root)
			{
				mRoot = CTreeNodeView.Create(root);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Фильтрация данных
			/// </summary>
			/// <remarks>
			/// Метод автоматически вызывается при изменении строки поиска или опции поиска
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnFilterd()
			{

			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================