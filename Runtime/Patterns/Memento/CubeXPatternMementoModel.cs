//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Подсистема хранения состояний
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternMementoModel.cs
*		Концепция состояния с возможностью отмены/повторения действия для модели данных .
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternMemento
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий хранения состояний при различных действиях
		/// </summary>
		/// <typeparam name="TCollectionModel">Соответствующий тип коллекции</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class ModelStateBaseMemento<TCollectionModel> where TCollectionModel : ICubeXCollectionModel
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			protected internal TCollectionModel mCollection;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Коллекция
			/// </summary>
			public TCollectionModel Collection
			{
				get { return (mCollection); }
				set
				{
					mCollection = value;
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateBaseMemento()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="collection">Коллекция</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateBaseMemento(TCollectionModel collection)
			{
				mCollection = collection;
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий хранение состояния при добавлении объекта
		/// </summary>
		/// <typeparam name="TCollectionModel">Соответствующий тип коллекции</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class ModelStateAddMemento<TCollectionModel> : ModelStateBaseMemento<TCollectionModel>, ICubeXStateMemento
			where TCollectionModel : ICubeXCollectionModel, ICubeXCollectionSupportAdd, 
			ICubeXCollectionSupportRemove

		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			internal ICubeXModel mModel;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			/// <remarks>
			/// Конструктор без параметров запрещен
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			private ModelStateAddMemento()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Добавленная модель</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateAddMemento(ICubeXModel model)
			{
				mModel = model.Clone() as ICubeXModel;
				mModel.ID = model.ID;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Добавленная модель</param>
			/// <param name="collection">Коллекция</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateAddMemento(ICubeXModel model, TCollectionModel collection)
				:base(collection)
			{
				mModel = model.Clone() as ICubeXModel;
				mModel.ID = model.ID;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Undo()
			{
				if (mCollection != null)
				{
					mCollection.RemoveModel(mModel as ICubeXModelOwned);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Повторение последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Redo()
			{
				if (mCollection != null)
				{
					mCollection.AddExistingModel(mModel as ICubeXModelOwned);
				}
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий хранение состояния при удалении объекта
		/// </summary>
		/// <typeparam name="TCollectionModel">Соответствующий тип коллекции</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class ModelStateRemoveMemento<TCollectionModel> : ModelStateBaseMemento<TCollectionModel>, ICubeXStateMemento
			where TCollectionModel : ICubeXCollectionModel, ICubeXCollectionSupportAdd,
			ICubeXCollectionSupportRemove
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			internal ICubeXModel mModel;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			/// <remarks>
			/// Конструктор без параметров запрещен
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			private ModelStateRemoveMemento()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Удаляемая модель</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateRemoveMemento(ICubeXModel model)
			{
				mModel = model.Clone() as ICubeXModel;
				mModel.ID = model.ID;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Удаляемая модель</param>
			/// <param name="collection">Коллекция</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateRemoveMemento(ICubeXModel model, TCollectionModel collection)
				:base(collection)
			{
				mModel = model.Clone() as ICubeXModel;
				mModel.ID = model.ID;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Undo()
			{
				if (mCollection != null)
				{
					mCollection.AddExistingModel(mModel as ICubeXModelOwned);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Повторение последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Redo()
			{
				if (mCollection != null)
				{
					mCollection.RemoveModel(mModel as ICubeXModelOwned);
				}
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон реализующий хранение состояния при изменении параметров объекта
		/// </summary>
		/// <typeparam name="TCollectionModel">Соответствующий тип коллекции</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class ModelStateChangedMemento<TCollectionModel> : ModelStateBaseMemento<TCollectionModel>, ICubeXStateMemento
			where TCollectionModel : ICubeXCollectionModel, ICubeXCollectionSupportFind
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			internal ICubeXModel mBeforeModel;
			internal ICubeXModel mAfterModel;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			/// <remarks>
			/// Конструктор без параметров запрещен
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			private ModelStateChangedMemento()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Модель до изменений</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateChangedMemento(ICubeXModel model)
			{
				mBeforeModel = model.Clone() as ICubeXModel;
				mBeforeModel.ID = model.ID;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="model">Модель до изменений</param>
			/// <param name="collection">Коллекция</param>
			//---------------------------------------------------------------------------------------------------------
			public ModelStateChangedMemento(ICubeXModel model, TCollectionModel collection)
				:base(collection)
			{
				mBeforeModel = model.Clone() as ICubeXModel;
				mBeforeModel.ID = model.ID;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Undo()
			{
				if (mCollection != null)
				{
					ICubeXModel model = mCollection.GetModelFromId(mBeforeModel.ID);
					if (model != null)
					{
						// Сохраняем состояние
						mAfterModel = model.Clone() as ICubeXModel;
						mAfterModel.ID = model.ID;

						// Копируем пармтеры
						model.CopyParameters(mBeforeModel);
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Повторение последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Redo()
			{
				if (mCollection != null)
				{
					ICubeXModel model = mCollection.GetModelFromId(mAfterModel.ID);
					if (model != null)
					{
						model.CopyParameters(mAfterModel);
					}
				}
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================