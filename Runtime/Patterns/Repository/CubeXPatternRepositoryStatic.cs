//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Репозиторий данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternRepositoryStatic.cs
*		Определение репозитория представляющего доступ к статическим данным.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Xml.Schema;
using System.Linq;
using System.Text;
//---------------------------------------------------------------------------------------------------------------------
#if USE_WINDOWS
using CubeX.Windows;
#endif
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternRepository
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс репозитория представляющего доступ к статическим данным
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public abstract class RepositoryStaticData : CModel
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal String mUniqueID;
			protected internal TRepositoryOrganization mOrganizationType;
			#endregion

			#region ======================================= СВОЙСТВА ICubeXRepository =================================
			/// <summary>
			/// Глобальный строковый идентификатор репозитория
			/// </summary>
			[Browsable(false)]
			public String UniqueID
			{
				get { return (mUniqueID); }
				set
				{
					mUniqueID = value;
				}
			}

			/// <summary>
			/// Тип репозитория с точки зрения модификации данных
			/// </summary>
			[Browsable(false)]
			public TRepositoryModify ModifyType
			{
				get { return (TRepositoryModify.Static); }
			}

			/// <summary>
			/// Тип репозитория с точки зрения организации данных
			/// </summary>
			[Browsable(false)]
			public TRepositoryOrganization OrganizationType
			{
				get { return (mOrganizationType); }
			}

			/// <summary>
			/// Обобщённый список записей
			/// </summary>
			[Browsable(false)]
			public abstract IList IRecords { get; }

			/// <summary>
			/// Статус редактирования записей/данных репозитория 
			/// </summary>
			[Browsable(false)]
			public Boolean IsEditable
			{
				get { return (false); }
				set { }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected RepositoryStaticData()
				: this(String.Empty, TRepositoryOrganization.Object)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="organization_type">Тип репозитория с точки зрения организации данных</param>
			//---------------------------------------------------------------------------------------------------------
			protected RepositoryStaticData(TRepositoryOrganization organization_type)
				: this(String.Empty, organization_type)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя репозитория</param>
			/// <param name="organization_type">Тип репозитория с точки зрения организации данных</param>
			//---------------------------------------------------------------------------------------------------------
			protected RepositoryStaticData(String name, TRepositoryOrganization organization_type = TRepositoryOrganization.Object)
				: base(name)
			{
				mOrganizationType = organization_type;
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXRepository ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Подключение репозитория к существующему набору данных с их загрузкой
			/// </summary>
			/// <param name="context">Контекст данных</param>
			/// <param name="is_loaded">Следует ли загружать все данные</param>
			/// <returns>Статус успешности подключения</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean Connect(System.Object context, Boolean is_loaded)
			{
				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Восстановление репозитория к состоянию последнего сохранения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Restore()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сохранение изменения в репозитории
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Save()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Закрытие репозитория и освобождения всех данных связанных с ним
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Close()
			{

			}
			#endregion

			#region ======================================= РАБОТА С ЗАПИСЬЮ ICubeXRepository =========================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавить запись
			/// </summary>
			/// <param name="items">Элементы записи</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void AddRecord(params System.Object[] items)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление записи
			/// </summary>
			/// <param name="index">Индекс записи</param>
			/// <param name="items">Элементы записи</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void UpdateRecord(Int32 index, params System.Object[] items)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск индекса записи
			/// </summary>
			/// <param name="items">Элементы записи</param>
			/// <returns>Индекс записи</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Int32 FindRecord(params System.Object[] items)
			{
				return (-1);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление записи
			/// </summary>
			/// <param name="index">Индекс записи</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void DeleteRecord(Int32 index)
			{

			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================