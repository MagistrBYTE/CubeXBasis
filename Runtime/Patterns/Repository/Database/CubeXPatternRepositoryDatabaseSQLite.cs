//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Репозиторий данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternRepositoryDatabase.cs
*		Репозиторий представляющий собой базу данных SQLite
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
//---------------------------------------------------------------------------------------------------------------------
#if USE_SQLITE
using System.Data.SQLite;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CorePatternRepository
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Репозиторий представляющий собой базу данных SQLite
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CRepositoryDatabaseSQLite : RepositoryDatabase
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal SQLiteConnection mConnection;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Соединение с базой данных
			/// </summary>
			public SQLiteConnection Connection
			{
				get { return (mConnection); }
			}

			/// <summary>
			/// Соединение с базой данных
			/// </summary>
			public override DbConnection IConnection
			{
				get { return (mConnection); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CRepositoryDatabaseSQLite()
				:this(String.Empty)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя репозитория</param>
			//---------------------------------------------------------------------------------------------------------
			public CRepositoryDatabaseSQLite(String name)
				: base(name)
			{
			}
			#endregion

			#region ======================================= МЕТОДЫ ICubeXRepository ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Подключение репозитория к существующему набору данных с их загрузкой
			/// </summary>
			/// <param name="context">Контекст данных</param>
			/// <param name="is_loaded">Следует ли загружать все данные</param>
			/// <returns>Статус успешности подключения</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Connect(System.Object context, Boolean is_loaded)
			{
				String connect_string = null;

				// Проверяем аргументы
				if (context != null && context.GetType() == typeof(String))
				{
					String connect_str = context.ToString();
					if (connect_str.IsExists())
					{
						connect_string = connect_str;
					}
				}

				// Если строка запроса пустая то формируем ее
				if (String.IsNullOrEmpty(connect_string))
				{
					connect_string = String.Format("server={0};user={1};database={2};password={3};", mSourceName, mLogin,
						mDatabaseName, mPassword);
				}

				// Соединяем
				try
				{
					mConnection = new SQLiteConnection(connect_string);
					mConnection.Open();

					// Создаем набор данных
					mDataSet = new DataSet();

					// Получаем таблицы
					List<String> tables = GetListTable();

					// Заполняем схему
					FillSchemeDataSet(tables);

					// Если надо загружаем еще и данные
					if (is_loaded)
					{
						Restore();
					}

					return (true);

				}
				catch (Exception exc)
				{
					XLogger.LogException(exc);
					return (false);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Восстановление репозитория к состоянию последнего сохранения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void Restore()
			{
				base.Restore();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сохранение изменения в репозитории
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void Save()
			{
				base.Save();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Закрытие репозитория и освобождения всех данных связанных с ним
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void Close()
			{
				base.Close();
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение конкретного адаптера данных по указанному запросу
			/// </summary>
			/// <param name="query">Запрос</param>
			/// <returns>Адаптер данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public override DbDataAdapter GetDataAdapter(String query)
			{
				return (new SQLiteDataAdapter(query, mConnection));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение списка таблиц для данной базы данных
			/// </summary>
			/// <returns>Список таблиц</returns>
			//---------------------------------------------------------------------------------------------------------
			public override List<String> GetListTable()
			{
				List<String> tables = new List<String>();


				return (tables);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
#endif
//=====================================================================================================================