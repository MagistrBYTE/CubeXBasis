//=====================================================================================================================
// Проект: CubeXPlatform
// Раздел: Модуль паттернов
// Подраздел: Репозиторий данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPatternRepository.cs
*		Репозиторий данных.
*		Репозиторий позволяет абстрагироваться от конкретных подключений к источникам данных, с которыми работает
*	приложение, и является промежуточным звеном между классами, непосредственно взаимодействующими с данными, 
*	и остальной программой.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 23.02.2020
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Xml.Schema;
//=====================================================================================================================
namespace CubeX
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CorePatternRepository Репозиторий данных
		//! Репозитории обеспечивают унифицированное представление данных независимо от источника этих данных. 
		//! Источник данных может быть различный - файл, база данных, статические данные в коде и т.д. 
		//! Данные репозитория представляют собой плоскую модель данный в виде обычного списка. Основная единица 
		//! данных - это запись. Она может быть, как объектом примитивного типа так и сложным объектом.
		//! \ingroup CorePattern
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип репозитория с точки зрения модификации данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TRepositoryModify
		{
			/// <summary>
			/// Статические данные
			/// </summary>
			/// <remarks>
			/// Статические данные - это данные доступные только для чтения, их нельзя модифицировать, добавить или удалить
			/// </remarks>
			Static,

			/// <summary>
			/// Динамические данные
			/// </summary>
			/// <remarks>
			/// Динамические данные - это данные которые доступны для модификации
			/// </remarks>
			Dynamic,
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип репозитория с точки зрения организации данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TRepositoryOrganization
		{
			/// <summary>
			/// Сырые данные
			/// </summary>
			/// <remarks>
			/// Сырые данные - это данные которые не представлены сложными типами, это просто список объектов 
			/// которые имеют примитивный тип.
			/// Как правило это данные в таблице базы данных, простых файлах и т.д.
			/// </remarks>
			Raw,

			/// <summary>
			/// Объектные данные
			/// </summary>
			/// <remarks>
			/// Объектные данные – это данные которые представлены в виде объектов, т.е. представлены сложными типами
			/// </remarks>
			Object,
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Обобщенный интерфейс репозитория для работы с данными
		/// </summary>
		/// <remarks>
		/// Под данными здесь понимается список определённых объектов именуемый список записей
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXRepository : ICubeXModel, ICubeXIdentifierUniqueID
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя источника данных
			/// </summary>
			/// <remarks>
			/// Имя источника данных связанного с данным репозиторием (имя файла, имя базы данных, имя веб-сервера и т.д.)
			/// </remarks>
			String SourceName { get; }

			/// <summary>
			/// Схема организации данных
			/// </summary>
			/// <remarks>
			/// Схема организации данных показывает, как устроены и организованы тип данных репозитория. 
			/// Обратите внимание что репозиторий поддерживает только плоскую модель данных.
			/// </remarks>
			CSchemeFlatData Scheme { get; }

			/// <summary>
			/// Тип репозитория с точки зрения модификации данных
			/// </summary>
			TRepositoryModify ModifyType { get; }

			/// <summary>
			/// Тип репозитория с точки зрения организации данных
			/// </summary>
			TRepositoryOrganization OrganizationType { get; }

			/// <summary>
			/// Обобщённый список записей
			/// </summary>
			IList IRecords { get; }

			/// <summary>
			/// Статус редактирования записей/данных репозитория
			/// </summary>
			Boolean IsEditable { get; }
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Подключение репозитория к существующему набору данных с их загрузкой
			/// </summary>
			/// <param name="context">Контекст данных</param>
			/// <param name="is_loaded">Следует ли загружать все данные</param>
			/// <returns>Статус успешности подключения</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean Connect(System.Object context, Boolean is_loaded);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Восстановление репозитория к состоянию последнего сохранения
			/// </summary>
			/// <remarks>
			/// Метод используется если данные можно редактировать
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			void Restore();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сохранение изменения в репозитории
			/// </summary>
			/// <remarks>
			/// Под сохранением понимается запись текущего(актуального) набора данных в соответствующее хранилище/
			/// Метод используется если данные можно редактировать.
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			void Save();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Закрытие репозитория и освобождения всех данных связанных с ним
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void Close();
			#endregion

			#region ======================================= МЕТОДЫ РАБОТЫ С ЗАПИСЬЮ ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавить запись
			/// </summary>
			/// <param name="items">Элементы записи</param>
			//---------------------------------------------------------------------------------------------------------
			void AddRecord(params System.Object[] items);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление записи
			/// </summary>
			/// <param name="index">Индекс записи</param>
			/// <param name="items">Элементы записи</param>
			//---------------------------------------------------------------------------------------------------------
			void UpdateRecord(Int32 index, params System.Object[] items);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск индекса записи
			/// </summary>
			/// <param name="items">Элементы записи</param>
			/// <returns>Индекс записи</returns>
			//---------------------------------------------------------------------------------------------------------
			Int32 FindRecord(params System.Object[] items);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление записи
			/// </summary>
			/// <param name="index">Индекс записи</param>
			//---------------------------------------------------------------------------------------------------------
			void DeleteRecord(Int32 index);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс репозитория с конкретным типом данных
		/// </summary>
		/// <typeparam name="TData">Тип данных</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXRepository<TData> : ICubeXRepository
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Список записей
			/// </summary>
			IList<TData> Records { get; }
			#endregion

			#region ======================================= МЕТОДЫ РАБОТЫ С ЗАПИСЬЮ ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавить запись
			/// </summary>
			/// <param name="record">Запись</param>
			//---------------------------------------------------------------------------------------------------------
			void AddRecord(in TData record);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление записи
			/// </summary>
			/// <param name="index">Индекс записи</param>
			/// <param name="record">Запись</param>
			//---------------------------------------------------------------------------------------------------------
			void UpdateRecord(Int32 index, in TData record);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Поиск индекса записи
			/// </summary>
			/// <param name="record">Запись</param>
			/// <returns>Индекс записи</returns>
			//---------------------------------------------------------------------------------------------------------
			Int32 FindRecord(in TData record);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Обобщенный интерфейс репозитория для работы с множественными данными
		/// </summary>
		/// <remarks>
		/// Под множественными данными понимается рад связанных данных (база данных и ее таблицы, набор связанных файлов)
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICubeXRepositoryMultiple : ICubeXRepository
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Словарь множественных данных
			/// </summary>
			/// <remarks>
			/// В качестве словаря используется имя данных (имя таблицы, имя файла и т.д.)
			/// </remarks>
			Dictionary<String, IList> IDictionaryData { get; }

			/// <summary>
			/// Обобщённый набор данных по технологии ADO
			/// </summary>
			/// <remarks>
			/// Необязательное свойство, может иметь значение NULL
			/// </remarks>
			DataSet DataSet { get; }
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================